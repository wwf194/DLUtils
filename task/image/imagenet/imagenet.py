import DLUtils
import os
import torch
from PIL import Image as Im
import json

# adapted from
# https://towardsdatascience.com/downloading-and-using-the-imagenet-dataset-with-pytorch-f0908437c4be
class ImageNet1k(DLUtils.AbstractModule):
    ParamMap = DLUtils.ExpandIterableKey({
        ("DataPath", "DataSetPath"): "Data.Path",
    })
    def __init__(self, Transform=None, **Dict):
        super().__init__(**Dict)
        self.Transform = Transform
    def TrainData(self, **Dict):
        return self.DataLoader("Train",  **Dict)
    def ValidationData(self, **Dict):
        return self.DataLoader("Validation", **Dict)
    def DataLoader(self, Type, **Dict):
        if Type in ["Train"]:
            InList = self.Train.InList
            OutList = self.Train.OutList
        elif Type in ["Validation"]:
            InList = self.Validation.InList
            OutList = self.Validation.OutList
        else:
            raise Exception()
        _DataLoader = DataLoader(
            DataFetcher=DataFetcher(
                InList=InList,
                OutList=OutList,
                Transform=self.Transform,
            ),
            **Dict
        ).Init()
        self.DataLoaderList.add(_DataLoader)
        if hasattr(self, "Device"):
            _DataLoader.SetDevice(self.Device)
        return _DataLoader
    def Init(self, IsSuper=False, IsRoot=True):
        Param = self.Param
        # dataset folder path setting
        assert Param.hasattr("Data.Path")
        Param.Data.Path = DLUtils.StandardizePath(Param.Data.Path)
        self.DataPath = Param.Data.Path
        
        self.InList = [] # input data sample list
        self.OutList = []
        
        self.Mode = Param.setdefault("Mode", "Validation")
        
        self.ClassCode2ClassIndex = {}
        # with open(os.path.join(self.DataPath, "imagenet-2012-1k-class-index.json"), "rb") as f:
        #     ClassCode2ClassIndexJson = json.load(f)

        ClassCode2ClassIndexJson = DLUtils.JsonFile2Dict(
            # "ClassIndex": ["FolderNameInTrainFolder", "ClassName"]
            self.DataPath + "class-index-train-folder-name-class-name.jsonc"
        )
        for ClassIndexStr, ClassCode in ClassCode2ClassIndexJson.items():
            self.ClassCode2ClassIndex[ClassCode[0]] = int(ClassIndexStr)
        
        # with open("ILSVRC2012_val_labels.json", "rb") as f:
        #     self.ValImageName2ClassCode = json.load(f)
        self.ValImageName2ClassCode = DLUtils.JsonFile2Dict(
            os.path.join(self.DataPath, "ILSVRC2012_val_labels.json")
        )
        
        TrainDataDir = os.path.join(self.DataPath, "ILSVRC/Data/CLS-LOC", "train")
        ValDataDir = os.path.join(self.DataPath, "ILSVRC/Data/CLS-LOC", "val")

        Train = self.Train = DLUtils.Param()
        Validation = self.Validation = DLUtils.Param()
        Train.InList = []
        Train.OutList = []
        Validation.InList = []
        Validation.OutList = []
        
        # prepare train data
        for ImageFolderName in os.listdir(TrainDataDir):
            ImageClassCode = ImageFolderName
            ImageClassIndex = self.ClassCode2ClassIndex[ImageClassCode]
            ImageClassFolderPath = os.path.join(TrainDataDir, ImageFolderName)
            for ImageFileName in DLUtils.ListAllFileNames(ImageClassFolderPath):
                ImageFilePath = os.path.join(ImageClassFolderPath, ImageFileName)
                Train.InList.append(ImageFilePath)
                Train.OutList.append(ImageClassIndex)
        # prepare validation data
        for ImageFileName in DLUtils.ListAllFiles(ValDataDir):
            ImageClassCode = self.ValImageName2ClassCode[ImageFileName]
            ImageClassIndex = self.ClassCode2ClassIndex[ImageClassCode]
            ImageFilePath = os.path.join(ValDataDir, ImageFileName)
            Validation.InList.append(ImageFilePath)
            Validation.OutList.append(ImageClassIndex)

        # Validation.OutList = DLUtils.ToNpArray(Validation.OutList, DataType="int8")

        self.DataLoaderList = set() # dataloader generated by this instance
        return super().Init(IsSuper=False, IsRoot=IsRoot)


class DataFetcher(DLUtils.train.DataFetcherForEpochBatchTrain):
    def __init__(self, InList, OutList, Transform=None):
        self.InList = InList
        self.OutList = OutList
        self.Transform = Transform
        self.DataNum = len(self.InList)
        super().__init__()
    def __len__(self):
        return self.DataNum
    def __getitem__(self, Index):
        Image = Im.open(self.InList[Index]).convert("RGB")
        if self.Transform:
            Image = self.Transform(Image)
        ClassIndex = self.OutList[Index]
        return Image, ClassIndex

# provide batch
class DataLoader(DLUtils.train.DataLoaderForEpochBatchTrain):
    pass